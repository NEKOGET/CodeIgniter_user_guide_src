##############################
設計とアーキテクチャのゴール
##############################

CodeIgniterのゴールは 最小かつ可能な限り軽量なパッケージで、
パフォーマンス・許容性・柔軟性を最大化することです。 

このゴールを達成するため、私たちはベンチマークを行い、
リファクタリングし、開発プロセスを単純化し、この目標に
そぐわないあらゆるものを捨て去りました。

技術的・設計的視点に立つと、CodeIgniter は次の目標にもとづいて
つくられているといえます:

-  **動的なインスタンス化。** CodeIgniterでは、グローバルに読み
   込んだり実行したりせず、必要とされたときだけ、コンポーネントを
   ロードし、処理を実行します。システムが動作するのには、最低限の
   コア以上のものを前提としないので、システムはデフォルトでは大変
   軽量です。HTTPリクエストなどをトリガーとして起こるイベントで、
   そして、プログラマが設計したコントローラやビューで、何を呼び出
   すかを定義します。
-  **疎結合。**  結合とはシステムのコンポーネントが互いに依存して
   いる度合いのことです。互いのコンポーネントの依存度が低ければ低
   いほどシステムは再利用性が高まり柔軟になります。私たちのゴール
   は非常に「疎」に結合されたシステムです。
-  **凝集化されたコンポーネント。** 凝集性は、コンポーネントがどれ
   だけ狭い範囲に集中した目的を持っているかという度合いのことです。
   CodeIgniterでは、各クラスやメソッドは、利用性を最大限にするため、
   高度に独立したものになっています。

CodeIgniter は、高度に凝集化されたコンポーネントで構成され、動的に
インスタンス化される疎結合のシステムです。省スペースのパッケージに
単純さと柔軟さ、そして高いパフォーマンスを詰め込むよう考え抜かれて
いるのです。
